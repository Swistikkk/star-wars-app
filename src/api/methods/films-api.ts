/* tslint:disable */
/* eslint-disable */
/**
 * swapi.dev
 * Adapted schema for swapi.dev
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { Film } from "../models";
/**
 * FilmsApi - axios parameter creator
 * @export
 */
export const FilmsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Get a specific film by id.
     * @param {string} id Id of the film.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFilmById: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getFilmById", "id", id);
      const localVarPath = `/api/films/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyQuery required
      await setApiKeyToObject(localVarQueryParameter, "code", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FilmsApi - functional programming interface
 * @export
 */
export const FilmsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FilmsApiAxiosParamCreator(configuration);
  return {
    /**
     * Get a specific film by id.
     * @param {string} id Id of the film.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFilmById(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Film>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFilmById(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * FilmsApi - factory interface
 * @export
 */
export const FilmsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = FilmsApiFp(configuration);
  return {
    /**
     * Get a specific film by id.
     * @param {FilmsApiGetFilmByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFilmById(
      requestParameters: FilmsApiGetFilmByIdRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<Film> {
      return localVarFp
        .getFilmById(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for getFilmById operation in FilmsApi.
 * @export
 * @interface FilmsApiGetFilmByIdRequest
 */
export interface FilmsApiGetFilmByIdRequest {
  /**
   * Id of the film.
   * @type {string}
   * @memberof FilmsApiGetFilmById
   */
  readonly id: string;
}

/**
 * FilmsApi - object-oriented interface
 * @export
 * @class FilmsApi
 * @extends {BaseAPI}
 */
export class FilmsApi extends BaseAPI {
  /**
   * Get a specific film by id.
   * @param {FilmsApiGetFilmByIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilmsApi
   */
  public getFilmById(
    requestParameters: FilmsApiGetFilmByIdRequest,
    options?: AxiosRequestConfig,
  ) {
    return FilmsApiFp(this.configuration)
      .getFilmById(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
